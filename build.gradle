plugins {
  id 'java'
  id 'jacoco'
  id 'org.springframework.boot' version '3.3.3'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'com.diffplug.eclipse.apt' version '4.0.1'
  id 'nu.studer.jooq' version '9.0'
}

group = 'io.github.krloxz.fws'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '21'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

ext {
  set('immutablesVersion', '2.10.1')
  set('mapstructVersion', '1.6.0')
  set('jooq.version', jooq.version.get())
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-hateoas'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  // Spring Modulith
  implementation 'org.springframework.modulith:spring-modulith-starter-core'
  implementation 'org.jmolecules.integrations:jmolecules-starter-ddd'
  implementation 'org.jmolecules:jmolecules-onion-architecture'

  // Immutables
  implementation "org.immutables:value-annotations:${immutablesVersion}"
  implementation "org.immutables:builder:${immutablesVersion}"
  implementation 'com.google.guava:guava:33.0.0-jre'
  annotationProcessor "org.immutables:value-processor:${immutablesVersion}"
  testAnnotationProcessor "org.immutables:value-processor:${immutablesVersion}"

  // Mapping framework
  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  annotationProcessor files('buildSrc/build/libs/buildSrc.jar')
  testAnnotationProcessor files('buildSrc/build/libs/buildSrc.jar')

  // Data access
  implementation 'org.springframework.boot:spring-boot-starter-jooq'
  implementation 'org.springframework.data:spring-data-commons'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  implementation 'org.flywaydb:flyway-core'
  jooqGenerator "org.jooq:jooq-meta-extensions:${jooq.version.get()}"
  runtimeOnly 'com.h2database:h2'

  // Required by @org.springframework.lang.Nullable
  implementation 'com.google.code.findbugs:jsr305:3.0.2'

  // Testing
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'com.atlassian.oai:swagger-request-validator-mockmvc:2.41.0'

  // Architecture veryfication and documentation
  testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
  testImplementation 'org.jmolecules.integrations:jmolecules-archunit'
  testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
  testImplementation 'com.structurizr:structurizr-dsl:2.2.0'
  testImplementation 'net.sourceforge.plantuml:plantuml-gplv2:1.2024.6'
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.modulith:spring-modulith-bom:1.2.3'
    mavenBom 'org.jmolecules:jmolecules-bom:2023.1.4'
  }
}

jooq {
  configurations {
    freelancer {
      generationTool {
        logging = org.jooq.meta.jaxb.Logging.WARN
        jdbc = null
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          database {
            name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
            schemata {
              schema {
                inputSchema = 'freelancer'
                outputSchema = 'freelancer'
              }
            }
            properties {
              property {
                key = 'scripts'
                value = "${projectDir}/src/*/resources/db/migration/*.sql"
              }
              property {
                key = 'sort'
                value = 'flyway'
              }
              property {
                key = 'unqualifiedSchema'
                value = 'none'
              }
              property {
                key = 'defaultNameCase'
                value = 'lower'
              }
            }
          }
          generate {
            relations = true
            records = true
            fluentSetters = true
          }
          target {
            packageName = 'io.github.krloxz.fws.freelancer.infra.jooq'
            directory = 'build/generated/sources/jooq/freelancer'
          }
        }
      }
    }
    project {
      generationTool {
        logging = org.jooq.meta.jaxb.Logging.WARN
        jdbc = null
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          database {
            name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
            schemata {
              schema {
                inputSchema = 'project'
                outputSchema = 'project'
              }
            }
            properties {
              property {
                key = 'scripts'
                value = "${projectDir}/src/*/resources/db/migration/*.sql"
              }
              property {
                key = 'sort'
                value = 'flyway'
              }
              property {
                key = 'unqualifiedSchema'
                value = 'none'
              }
              property {
                key = 'defaultNameCase'
                value = 'lower'
              }
            }
          }
          generate {
            relations = true
            records = true
            fluentSetters = true
          }
          target {
            packageName = 'io.github.krloxz.fws.project.infra.jooq'
            directory = 'build/generated/sources/jooq/project'
          }
        }
      }
    }
  }
}

tasks.register('generateJooq') {
  group = 'JOOQ'
  description = 'Generates all the jOOQ sources.'
}

['generateFreelancerJooq', 'generateProjectJooq']
  .collect{ tasks.named(it) }
  .each { jooqTask ->
    // Make jOOQ task participate in incremental builds
    jooqTask.configure { allInputsDeclared = true }
    // Wire JOOQ sources into the main Java source set
    sourceSets.main.java.srcDirs(jooqTask.flatMap{ it.outputDir })
    // Group all jooq tasks together
    tasks.named('generateJooq') {
      dependsOn jooqTask
      inputs.files jooqTask
      outputs.files jooqTask
    }
  }

eclipse {
  synchronizationTasks 'generateJooq'
  classpath {
    downloadSources = true
  }
}

tasks.named('test') {
  useJUnitPlatform {
    excludeTags 'architecture', 'documentation'
  }
  jvmArgs("-XX:+EnableDynamicAgentLoading")

  // Copied from https://stackoverflow.com/a/36130467
  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
      def repeatLength = output.length()
      println('\n' + ('-' * output.length()) + '\n' + output + '\n' + ('-' * output.length()))
    }
  }
}

tasks.register('verifyArchitecture', Test) {
  group = 'verification'
  description = 'Verifies architecture and design practices.'

  useJUnitPlatform {
    includeTags 'architecture'
  }
  jvmArgs("-XX:+EnableDynamicAgentLoading")
  mustRunAfter 'test'
}

tasks.register('generateDocumentation', Test) {
  group = 'documentation'
  description = 'Generates documentation artifacts.'

  useJUnitPlatform {
    includeTags 'documentation'
  }
  jvmArgs("-XX:+EnableDynamicAgentLoading")
  outputs.upToDateWhen { false }
  mustRunAfter 'verifyArchitecture'
}

tasks.named('check') {
  dependsOn 'verifyArchitecture', 'generateDocumentation'
}
