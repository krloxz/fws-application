plugins {
  id 'java'
  id 'jacoco'
  id 'org.springframework.boot' version '3.3.3'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'com.diffplug.eclipse.apt' version '4.0.1'
  id 'nu.studer.jooq' version '9.0'
  id 'pl.zalas.structurizr-cli' version '1.9.0'
}

group = 'io.github.krloxz.fws'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '21'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
  plantuml
}

repositories {
  mavenCentral()
}

ext {
  set('immutablesVersion', '2.10.1')
  set('mapstructVersion', '1.6.0')
  set('jooq.version', jooq.version.get())
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-hateoas'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  // Immutables
  implementation "org.immutables:value-annotations:${immutablesVersion}"
  implementation "org.immutables:builder:${immutablesVersion}"
  annotationProcessor "org.immutables:value-processor:${immutablesVersion}"
  testAnnotationProcessor "org.immutables:value-processor:${immutablesVersion}"

  // Mapping framework
  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  annotationProcessor files('buildSrc/build/libs/buildSrc.jar')
  testAnnotationProcessor files('buildSrc/build/libs/buildSrc.jar')

  // Data access
  implementation 'org.springframework.boot:spring-boot-starter-jooq'
  implementation 'org.springframework.data:spring-data-commons'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  implementation 'org.flywaydb:flyway-core'
  jooqGenerator "org.jooq:jooq-meta-extensions:${jooq.version.get()}"
  runtimeOnly 'com.h2database:h2'

  // Required by @org.springframework.lang.Nullable
  implementation 'com.google.code.findbugs:jsr305:3.0.2'

  // PlantUML
  plantuml 'net.sourceforge.plantuml:plantuml-gplv2:1.2024.6'

  // Testing
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
  testImplementation 'com.atlassian.oai:swagger-request-validator-mockmvc:2.41.0'
}

jooq {
  configurations {
    main {
      generationTool {
        logging = org.jooq.meta.jaxb.Logging.WARN
        jdbc = null
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          database {
            name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
            schemata {
              schema {
                inputSchema = 'freelancer'
                outputSchema = 'freelancer'
              }
              schema {
                inputSchema = 'project'
                outputSchema = 'project'
              }
            }
            properties {
              property {
                key = 'scripts'
                value = "${projectDir}/src/*/resources/db/migration/*.sql"
              }
              property {
                key = 'sort'
                value = 'flyway'
              }
              property {
                key = 'unqualifiedSchema'
                value = 'none'
              }
              property {
                key = 'defaultNameCase'
                value = 'lower'
              }
            }
          }
          generate {
            relations = true
            records = true
            fluentSetters = true
          }
          target {
            packageName = 'io.github.krloxz.fws.infra.jooq'
            directory = 'build/generated/sources/jooq'
          }
        }
      }
    }
  }
}

eclipse {
  synchronizationTasks generateJooq
  classpath {
    downloadSources = true
  }
}

tasks.named('test') {
  useJUnitPlatform()
  jvmArgs("-XX:+EnableDynamicAgentLoading")
}

test {
  // Copied from https://stackoverflow.com/a/36130467
  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
      def repeatLength = output.length()
      println('\n' + ('-' * output.length()) + '\n' + output + '\n' + ('-' * output.length()))
    }
  }
}

structurizrCli {
  export {
    name = 'PlantUML'
    format = 'plantuml'
    workspace = "${projectDir}/docs/structurizr/workspace.dsl"
    output = "${projectDir}/docs/structurizr/.generated"
  }
}

tasks.register('diagrams', JavaExec) {
  group = 'documentation'
  description = 'Generates Structurizr and PlantUML diagrams.'

  classpath = configurations.plantuml
  main = 'net.sourceforge.plantuml.Run'
  args = ["-tsvg", "-o", "${projectDir}/docs/images", "${projectDir}/docs/**/*.puml"]

  inputs.files fileTree(dir: "${projectDir}/docs", include: '**/*.puml')
  outputs.dir "${projectDir}/docs/images"
  outputs.dir "${projectDir}/docs/structurizr/.generated"
  dependsOn structurizrCliExport
}
